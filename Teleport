---------------------------------------------------------------------------------------------------------------------------------------------------------------------------   функция как работает
        LocalPlayer = game.Players.LocalPlayer
        Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        Backpack = LocalPlayer:WaitForChild("Backpack")
        function Skill(SkillName, callback, Cooldown, ToggleCooldown)
            local Skill = Instance.new("Tool")
            Skill.Name = SkillName
            Skill.RequiresHandle = false
            Skill.Parent = Backpack
            Skill:SetAttribute("Cooldown", Cooldown)
            local SkillHotbar
            local State
            Cooldown = Cooldown or 0
            local CooldownGui = LocalPlayer.PlayerGui.Hotbar.Backpack.LocalScript.Cooldown:Clone()
            if Backpack:GetAttribute("CustomSkills") == nil then
                Backpack:SetAttribute("CustomSkills", -1)
            end
            Backpack:SetAttribute("CustomSkills", Backpack:GetAttribute("CustomSkills") + 1)
            for HotbarNum = 1, 13 do
                local HotbarToolName = LocalPlayer.PlayerGui.Hotbar.Backpack.Hotbar[tostring(HotbarNum)].Base.ToolName.Text
                if HotbarToolName == Skill.Name then
                    SkillHotbar = LocalPlayer.PlayerGui.Hotbar.Backpack.Hotbar[tostring(HotbarNum)].Base
                    Skill.Name = Skill.Name.."ID:"..tostring(Backpack:GetAttribute("CustomSkills"))
                    LocalPlayer.PlayerGui.Hotbar.Backpack.Hotbar[tostring(HotbarNum)].Base.ToolName.Text = HotbarToolName
                end
            end
            CooldownGui.Parent = SkillHotbar.Parent
            CooldownGui.Size = UDim2.new(1, 0, 0, 0)
            if Backpack:GetAttribute("CustomSkills") == nil then
                Backpack:SetAttribute("CustomSkills", -1)
            end
            Backpack:SetAttribute("CustomSkills", Backpack:GetAttribute("CustomSkills") + 1)
            local SkillFunction = SkillHotbar.Activated:Connect(function()
                if not IPlacedThisForSpacing then
                    SkillHotbar.Overlay.Visible = false
                    if Cooldown ~= 1234 and CooldownGui.Size == UDim2.new(1, 0, 0, 0) then
                        CooldownGui.Size = UDim2.new(1, 0, -1, 0)
                        local CooldownAnim = game:GetService("TweenService"):Create(CooldownGui, TweenInfo.new(Cooldown, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
                            Size = UDim2.new(1, 0, 0, 0),
                        }):Play()
                        callback()
                    elseif Cooldown == 1234 then
                        if not State and CooldownGui.Size == UDim2.new(1, 0, 0, 0) then
                            State = true
                            CooldownGui.Size = UDim2.new(1, 0, -1, 0)
                            callback()
                        elseif State and CooldownGui.Size == UDim2.new(1, 0, -1, 0) then
                            State = false
                            ToggleCooldown = ToggleCooldown or 0.2
                            CooldownGui.Size = UDim2.new(1, 0, -1, 0)
                            local CooldownAnim = game:GetService("TweenService"):Create(CooldownGui, TweenInfo.new(ToggleCooldown, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
                                Size = UDim2.new(1, 0, 0, 0),
                            }):Play()
                            callback()
                        end
                    end
                end
            end)
            local function IntToKey(int)
                local keys = {Enum.KeyCode.Zero, Enum.KeyCode.One, Enum.KeyCode.Two, Enum.KeyCode.Three, Enum.KeyCode.Four, Enum.KeyCode.Five, Enum.KeyCode.Six, Enum.KeyCode.Seven, Enum.KeyCode.Eight, Enum.KeyCode.Nine}
                return keys[int + 1]
            end
            local SkillFunction2 = game:GetService("UserInputService").InputBegan:Connect(function(input)
                if input.KeyCode == IntToKey(tostring(SkillHotbar.Parent))then
                    SkillHotbar.Overlay.Visible = false
                    if Cooldown ~= 1234 and CooldownGui.Size == UDim2.new(1, 0, 0, 0) then
                        CooldownGui.Size = UDim2.new(1, 0, -1, 0)
                        local CooldownAnim = game:GetService("TweenService"):Create(CooldownGui, TweenInfo.new(Cooldown, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
                            Size = UDim2.new(1, 0, 0, 0),
                        }):Play()
                        callback()
                    elseif Cooldown == 1234 then
                        if not State and CooldownGui.Size == UDim2.new(1, 0, 0, 0) then
                            State = true
                            CooldownGui.Size = UDim2.new(1, 0, -1, 0)
                            callback()
                        elseif State and CooldownGui.Size == UDim2.new(1, 0, -1, 0) then
                            State = false
                            ToggleCooldown = ToggleCooldown or 0.2
                            CooldownGui.Size = UDim2.new(1, 0, -1, 0)
                            local CooldownAnim = game:GetService("TweenService"):Create(CooldownGui, TweenInfo.new(ToggleCooldown, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
                                Size = UDim2.new(1, 0, 0, 0),
                            }):Play()
                            callback()
                        end
                    end
                end
            end)
            local SkillDelete = Skill.AncestryChanged:Connect(function(child, parent)
                if parent == nil then
                    SkillFunction:Disconnect()
                    SkillFunction2:Disconnect()
                    PlayerDied:Disconnect()
                elseif parent == workspace.Live:FindFirstChild(LocalPlayer.Name) then
                    task.wait()
                    Skill.Parent = Backpack
                end
            end)
            local PlayerDied = Character.Humanoid.Died:Once(function()
                SkillFunction:Disconnect()
                SkillFunction2:Disconnect()
                SkillDelete:Disconnect()
            end)
            return Skill
        end

------------------------------------------------------------------------------------------------------------ телепорт
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")
local hrp = char:WaitForChild("HumanoidRootPart")

local TELEPORT_DISTANCE = 30
local TELEPORT_BACK_DISTANCE = 0.5
local SPEED = 2000 -- скорость перемещения в юнитах в секунду

local SOUND_ID = "rbxassetid://123044239731998"
local ANIM_ID = "rbxassetid://15673683215"

local function playSound()
    local sound = Instance.new("Sound", hrp)
    sound.SoundId = SOUND_ID
    sound:Play()
	sound.Volume = 100
    sound.Parent = Character:WaitForChild("HumanoidRootPart")
    sound.Ended:Connect(function() sound:Destroy() end)
end

local function playAnimation()
    local animation = Instance.new("Animation")
    animation.AnimationId = ANIM_ID

    local track = humanoid:LoadAnimation(animation)
    track.Priority = Enum.AnimationPriority.Action
    track:Play()

    -- Ждём загрузки длины анимации
    while track.Length == 0 do
        task.wait()
    end

    -- Устанавливаем старт с 3-й секунды
    track.TimePosition = 3

    -- Останавливаем анимацию за 0.1 секунды до конца
    local stopTime = math.max(track.Length - 2, 2)
    delay(stopTime, function()
        if track.IsPlaying then
            track:Stop()
        end
    end)
end




local function findNearestTarget()
    local nearestCharacter = nil
    local nearestDistance = math.huge

    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player then
            local otherChar = otherPlayer.Character
            if otherChar and otherChar:FindFirstChild("Humanoid") and otherChar.Humanoid.Health > 0 then
                local otherHRP = otherChar:FindFirstChild("HumanoidRootPart")
                if otherHRP then
                    local dist = (otherHRP.Position - hrp.Position).Magnitude
                    if dist < nearestDistance then
                        nearestDistance = dist
                        nearestCharacter = otherChar
                    end
                end
            end
        end
    end

    return nearestCharacter
end

local function tweenTeleport(targetCFrame)
    local distance = (hrp.Position - targetCFrame.Position).Magnitude
    local duration = distance / SPEED
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(hrp, tweenInfo, {CFrame = targetCFrame})
    tween:Play()
    tween.Completed:Wait()
end

local function teleport()
    local moveDir = humanoid.MoveDirection
    local targetCFrame

    if moveDir.Magnitude > 0 then
        local newPos = hrp.Position + moveDir.Unit * TELEPORT_DISTANCE
        targetCFrame = CFrame.new(newPos, newPos + moveDir.Unit)
    else
        local target = findNearestTarget()
        if target then
            local targetHRP = target:FindFirstChild("HumanoidRootPart")
            if targetHRP then
                targetCFrame = targetHRP.CFrame * CFrame.new(0, 0, TELEPORT_BACK_DISTANCE)
            end
        end
    end

    if targetCFrame then
        tweenTeleport(targetCFrame)
        playSound()
        playAnimation()
    end
end

        local Cooldown = 0.1
        TestSkill = Skill("Teleport", function()
            teleport()
        end, 0.1)
