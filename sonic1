local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Конфигурация анимаций
local targetAnimations = {
    ["13378708199"] = {newId = "rbxassetid://18897624255", startTime = 1.7, stopAfter = true},
    ["10470104242"] = {newId = "rbxassetid://129651400898906", startTime = 0.2, stopAfter = false}
}

-- Глобальные переменные
local humanoid = nil
local currentNewTrack = nil
local isReplacing = false
local heartbeatConnection
local animationPlayedConnection

local function fadeOutAnimation(track, fadeTime)
    local steps = 20
    local stepTime = fadeTime / steps
    for i = 1, steps do
        if not track.IsPlaying or not _G.isScriptEnabled then return end
        local weight = 1 * (1 - (i / steps))
        track:AdjustWeight(weight, 0)
        task.wait(stepTime)
    end
    if track.IsPlaying then
        track:Stop()
    end
end

local function stopCurrentAnimation()
    if not _G.isScriptEnabled then return end

    if currentNewTrack and currentNewTrack.IsPlaying then
        local animId = string.gsub(currentNewTrack.Animation.AnimationId, "rbxassetid://", "")
        local animConfig = nil
        for _, v in pairs(targetAnimations) do
            if v.newId == currentNewTrack.Animation.AnimationId then
                animConfig = v
                break
            end
        end
        if animConfig and animConfig.stopAfter then
            fadeOutAnimation(currentNewTrack, 0.3)
        end
        currentNewTrack = nil
        isReplacing = false
    end
end

local function replaceAnimation(trackToStop, targetId)
    if not _G.isScriptEnabled or isReplacing or not humanoid then return end
    isReplacing = true

    if trackToStop and trackToStop.IsPlaying then
        trackToStop:Stop()
    end
    stopCurrentAnimation()

    local animData = targetAnimations[targetId]
    if not animData then
        isReplacing = false
        return
    end

    local newAnimation = Instance.new("Animation")
    newAnimation.AnimationId = animData.newId

    local newTrack = humanoid:LoadAnimation(newAnimation)
    newTrack.Priority = Enum.AnimationPriority.Action4
    newTrack:Play(0, 1, 2)
    currentNewTrack = newTrack

    task.delay(0.05, function()
        if newTrack.IsPlaying then
            newTrack.TimePosition = animData.startTime
        end
    end)

    if animData.stopAfter then
        task.delay(0.25, function()
            if newTrack.IsPlaying and _G.isScriptEnabled then
                fadeOutAnimation(newTrack, 0.3)
                currentNewTrack = nil
                isReplacing = false
            end
        end)
    else
        task.delay(0.5, function()
            isReplacing = false
        end)
    end
end

local function setupHumanoid(newHumanoid)
    if animationPlayedConnection then animationPlayedConnection:Disconnect() end
    if heartbeatConnection then heartbeatConnection:Disconnect() end

    humanoid = newHumanoid
    currentNewTrack = nil
    isReplacing = false

    animationPlayedConnection = humanoid.AnimationPlayed:Connect(function(track)
        if not _G.isScriptEnabled then return end
        local id = string.gsub(track.Animation.AnimationId, "rbxassetid://", "")
        if targetAnimations[id] then
            replaceAnimation(track, id)
        elseif currentNewTrack and id ~= string.gsub(currentNewTrack.Animation.AnimationId, "rbxassetid://", "") then
            stopCurrentAnimation()
        end
    end)

    heartbeatConnection = RunService.Heartbeat:Connect(function()
        if not _G.isScriptEnabled or not humanoid then return end
        local foundTarget = false
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            local id = string.gsub(track.Animation.AnimationId, "rbxassetid://", "")
            if targetAnimations[id] then
                replaceAnimation(track, id)
                foundTarget = true
                break
            end
        end
        if not foundTarget and humanoid.MoveDirection.Magnitude > 0 then
            stopCurrentAnimation()
        end
    end)
end

local function onCharacterAdded(character)
    if not _G.isScriptEnabled then return end
    local newHumanoid = character:WaitForChild("Humanoid")
    setupHumanoid(newHumanoid)
end

if player.Character then
    onCharacterAdded(player.Character)
end

player.CharacterAdded:Connect(onCharacterAdded)
